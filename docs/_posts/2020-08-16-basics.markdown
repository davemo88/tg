---
layout: post
title:  "Crypto Escrow Basics"
date:   2020-08-16 18:36:18 -0400
categories: jekyll update
---

Crypto Escrow is a service which facilitates cryptographically-secured contracts concerning the distribution of funds based on specified contingencies. The contracts in question are agreements between two game players and an arbiter about how to release funds from a 2-of-3 multisignature account. The arbiter enforces these agreements, e.g. if player 1 wins, pay player 1; if player 2 wins, pay player 2.

Many people play games for money but don't know or trust each other. These players often use a trusted third party to enforce the terms of their money match. The third party holds the money for the duration of the match and resolves disputes related to the match itself, i.e. enforces game rules.

Holding the money ensures the players have the requisite amount as well as that the money will be correctly distributed upon the outcome of the match. This requires that the third party be able to determine the outcome of the match if the players do not agree. 

This setup is unfortunate for a few reasons. First, the third party takes possession of the players' money but is only necessary to settle cases in which the players do not cooperate. Since it takes possession, it must also provide secure storage for the funds.

In contrast, a multisig account allows the players to maintain possession of their money and only use the arbiter when necessary. Both players must still commit the requisite amount, any distribution of funds requires approval by both players or by one player and the arbiter, and secure underlying storage is provided by the blockchain.

Second, the third party must provide game-domain expertise in order to resolve disputes. This task is of arbitrary complexity depending on the game and can be handled separately from the storage and management of funds. It warrants its own dedicated service. 

Crypto Escrow makes it possible to designate another service as a game-domain expertise delegate in the escrow contracts terms. The arbiter then requires signatures from the delegate whenever its expertise is required to resolve a dispute, i.e. to confirm that Player 1 wins. 

#### Primary Use Case Summary

1. player creates contract and sends it to other player
2. other player accepts or declines it. if they accept, send contract to arbiter
3. arbiter certifies the contract and sends it back to players
4. players broadcast the funding tx
5. players play their match
6. after the match, either:
    * the players pay out the account cooperatively
    * one player sends a payout request to the arbiter

## Concepts

### Player IDs / Pubkey Hashes 
Players are identified by pubkey hashes. A bitcoin-compatible key can be used to store player data in the namecoin chain. This allows for human-readable player names which can reliably correspond with pubkeys, e.g. can register names in a namecoin namespace. It's also useful since players must frequently provide signatures.

### Escrow Contract 
An escrow contract is an agreement about how to use a 2-of-3 multsig account (escrow account) containing keys from two players as well as a third party known as the arbiter. 

As part of formation of the escrow contract, the players draft a transaction to fund the account (funding_tx) as well as a script used by the arbiter to settle disputes between the players over how to pay out the account (payout_script). 

An Escrow Contract requires signatures from both players as well as the arbiter.

#### Escrow Contract data stucture
```
p1_pkh: player one's pubkey hash 
p2_pkh: player two's pubkey hash
arbiter_pkh: arbiter's pubkey hash
funding_tx: the transaction which will fund the escrow account
payout_script: the script used by the arbiter to determine payout request validity
contract_sigs: signed hash of the other attributes. this hash is called the contract id or cxid
```

### Payout Request
A request to spend money from the escrow account. 

Because signatures from only 2 of the 3 keyholders are required to spend from the account, the players may pay out the account at any time if they cooperate. In case of a dispute, the payout script allows the players to obtain a signature from the arbiter if the conditions of the payout script can be satisfied. Standard script templates are defined but players can create their own.

#### Payout Request data stucture
```
contract: corresponding contract
payout_tx: the transaction which will pay out the escrow account. 
    * must spend from the funding transaction 
    * may only spend to addresses controlled by the players
script_signature: input for the payout script, most likely a digital signature
```

## Contract Implementation Steps
1. p1 signs both the funding_tx as well as the contract (cxid). 
2. p2 verifies these signatures, then signs the funding_tx and signs on top of p1's contract sig.
    * at this point the funding tx is valid because both players have signed. however the funding tx cannot already be mined for a contract to be approved by the arbiter.
3. the arbiter confirms that the funding tx is valid (i.e. signed by both players but not in the blockchain) and both player contract sigs before signing the contract on top. 

Now the players can broadcast the funding tx. Once it is mined, the contract is considered `Live`.


to use the arbiter, one player assembles a payout tx and a script signature as well as the original contract including all the contract signatures. This bundle of data is called a Payout Request. the arbiter uses the contract signatures to verify that the contract is authentic and certified by the arbiter and then uses the contract's script to determine the validity of the payout request, passing the script signature as input and using the payout tx as context.

* Payout Script - script which defines valid script signature values for payout requests. in the standard case, this will effectively be "if there is a signature from key K_1, sign transaction T_1"

* Script - an bitcoin-script inspired scripting language. instead of validating bitcoin transaction signatures, it validates Payout Request signatures.

### Contract Details
#### Creation
* pubkey hashes
* script
    * standard script
* funding tx
#### Signing
### Payout Details
